"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[406],{4406:function(n,e,t){t.r(e),t.d(e,{default:function(){return M}});var o=t(1012),r=t(2747),a=t(7294),i=t(2212),l="#define GLSLIFY 1\nout vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n",u="precision highp float;\n#define GLSLIFY 1\n\nout highp vec4 gFlowMap;\n\nuniform sampler2D tMap;\nuniform float uFalloff;\nuniform float uAlpha;\nuniform float time;\nuniform float uDissipation;\nuniform vec2 uRes;\nuniform bool uVisible;\n\nuniform vec2 uMouse;\n\n#include <packing>\n\nin vec2 vUv;\n\n//3D simplex noise from: https://www.shadertoy.com/view/XsX3zB\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t vec4 w, d;\n\t \n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t w = max(0.6 - w, 0.0);\n\t \n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t return dot(d, vec4(52.0));\n}\n\nfloat fbm(vec3 p)\n{\n\tfloat f = 0.0;\t\n\tfloat frequency = 1.0;\n\tfloat amplitude = 0.5;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += simplex3d(p * frequency) * amplitude;\n\t\tamplitude *= 0.5;\n\t\tfrequency *= 2.0 + float(i) / 100.0;\n\t}\n\treturn min(f, 1.0);\n}\n\nvoid main() {\n    // vec4 color = texture2D(tMap, vUv ) * uDissipation;\n\n    // vec2 cursor = vUv - uMouse * uVisible;\n    // cursor.x *= uRes.x / uRes.y;\n\n    // vec3 stamp = vec3(1. * vec2(1, -1), 1.0 - pow(1.0 - min(1.0, length(1.)), 3.0));\n    // float falloff = smoothstep(uFalloff, 0.0, length(cursor)) * uAlpha;\n    // color.rgb = mix(color.rgb, stamp, falloff);\n    // float alpha = color.r + color.g + color.b;\n\n    // gFlowMap = vec4(color.rgb, alpha);\n    // // gFlowMap = vec4(color.rgb, 1.);\n\n    vec2 p = gl_FragCoord.xy / uRes.xy - .5;\n    vec3 rd = normalize(vec3(p, 1.0));\n    vec3 pos = vec3(0.0, 0.0, 1.0) * time + rd * 15.0;\n    float f = fbm(pos);\n    vec3 col = vec3(0.067,0.173,0.537) * fbm(pos);\n\n    vec4 color = texture2D(tMap, vUv ) * uDissipation;\n    vec2 mouse = uMouse;\n    if (!uVisible) {\n      mouse = vec2(-1.5, -1.5);\n    }\n    vec2 cursor = vUv - mouse;\n    cursor.x *= uRes.x / uRes.y;\n\n    vec3 stamp = vec3(1. * vec2(1, -1), 1.0 - pow(1.0 - min(1.0, length(1.)), 3.0));\n    float falloff = smoothstep(uFalloff, 0.0, length(cursor)) * f;\n    color.rgb = mix(color.rgb, vec3(1.0), falloff);\n    float alpha = color.r + color.g + color.b;\n\n    gFlowMap = vec4(color.rgb, alpha);\n    // gFlowMap = vec4(color.rgb, 1.);\n}\n",c=t(1479);function f(n,e){var t="undefined"!==typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!t){if(Array.isArray(n)||(t=function(n,e){if(!n)return;if("string"===typeof n)return s(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);"Object"===t&&n.constructor&&(t=n.constructor.name);if("Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return s(n,e)}(n))||e&&n&&"number"===typeof n.length){t&&(n=t);var o=0,r=function(){};return{s:r,n:function(){return o>=n.length?{done:!0}:{done:!1,value:n[o++]}},e:function(n){throw n},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,l=!1;return{s:function(){t=t.call(n)},n:function(){var n=t.next();return i=n.done,n},e:function(n){l=!0,a=n},f:function(){try{i||null==t.return||t.return()}finally{if(l)throw a}}}}function s(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=n[t];return o}var v=function(n){n.traverse((function(n){if(n.isMesh)if(n.geometry.dispose(),n.material.isMaterial)m(n.material);else{var e,t=f(n.material);try{for(t.s();!(e=t.n()).done;){var o=e.value;m(o)}}catch(r){t.e(r)}finally{t.f()}}}))},m=function(n){for(var e=0,t=Object.keys(n);e<t.length;e++){var o=n[t[e]];o&&"object"===typeof o&&"minFilter"in o&&o.dispose()}n.dispose()};function d(){var n=new i.BufferGeometry,e=new Float32Array([-1,-1,3,-1,-1,3]),t=new Float32Array([0,0,2,0,0,2]);return n.setAttribute("position",new i.BufferAttribute(e,2)),n.setAttribute("uv",new i.BufferAttribute(t,2)),n}var p=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.05,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.955,o=(0,c.w)(),f=o.size,s=(0,a.useMemo)((function(){return new i.Scene}),[]),m=new i.OrthographicCamera(-1,1,1,-1,0,1),p=d(),h=(0,a.useMemo)((function(){return new i.Vector2}),[]),w=(0,a.useMemo)((function(){return new i.Vector2}),[]);(0,a.useEffect)((function(){var n=function(n){var e=n.clientX/window.innerWidth*2-1,t=-n.clientY/window.innerHeight*2+1;h.set(e,t)};return document.addEventListener("mousemove",n),function(){document.removeEventListener("mousemove",n)}}),[]);var x=(0,a.useMemo)((function(){return new i.WebGLRenderTarget(f.width,f.height,{type:i.HalfFloatType,depthBuffer:!1})}),[f]);x.name="flowRTTread";var g=(0,a.useMemo)((function(){return new i.WebGLRenderTarget(f.width,f.height,{type:i.HalfFloatType,depthBuffer:!1})}),[f]);g.name="flowRTTwrite",g.depthBuffer=!1;var b=(0,a.useMemo)((function(){return new i.ShaderMaterial({uniforms:{tMap:{value:null},uFalloff:{value:n},uAlpha:{value:e},time:{value:0},uVisible:{value:!0},uDissipation:{value:t},uRes:{value:new i.Vector2(f.width,f.height)},uMouse:{value:new i.Vector2(-.25,.5)}},vertexShader:l,fragmentShader:u,depthTest:!1,glslVersion:i.GLSL3})}),[]),y=(0,a.useMemo)((function(){return new i.Mesh(p,b)}),[]);return r.Z.setState({flowmap:y.material.uniforms.tMap.value}),y.frustumCulled=!1,s.add(y),(0,c.x)((function(n,e){var t=n.gl;n.mouse,n.scene,n.camera;if(b){var o=.5*h.x+.5+0,r=.5*h.y+.5;o===w.x&&r===w.y?b.uniforms.uVisible.value=!1:b.uniforms.uVisible.value=!0,w.set(.5*h.x+.5+0,.5*h.y+.5),b.uniforms.time.value+=e,b.uniforms.uMouse.value.lerp(w,.14)}t.autoClear=!1,t.setRenderTarget(g),t.render(s,m);var a=x;x=g,g=a,b.uniforms.tMap.value=x.texture,t.setRenderTarget(null),t.render(s,m)}),1),(0,a.useEffect)((function(){g.setSize(f.width,f.height),x.setSize(f.width,f.height),b.uniforms.uRes.value=new i.Vector2(f.width,f.height)}),[f]),(0,a.useEffect)((function(){return function(){g.dispose(),x.dispose(),v(s)}}),[]),x.texture},h=t(5827),w=new i.ShaderMaterial({uniforms:{time:{value:null},anim:{value:0},tFlowMap:{value:null},uRes:{value:null},uTheme:{value:null}},fragmentShader:"#define GLSLIFY 1\nuniform float time;\nuniform vec2 uRes;\nuniform float anim;\nuniform sampler2D flowmap;\nuniform vec3 uTheme;\nvarying vec2 vUv;\n\n/*\n A noise function mirrored and thresholded to maximize the value at the center of the screen\n Combined with a second layer of noise to produce an ink on paper effect\n*/\n\nconst vec3 inkColor = vec3(0.01, 0.01, 0.1);\nconst vec3 paperColor = vec3(1.0, 0.98, 0.94);\n\nconst float speed = 0.0075;\nconst float shadeContrast = 0.55;\n\n//3D simplex noise from: https://www.shadertoy.com/view/XsX3zB\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t vec4 w, d;\n\t \n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t w = max(0.6 - w, 0.0);\n\t \n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t return dot(d, vec4(52.0));\n}\n\nfloat fbmB(vec3 p)\n{\n\tfloat f = 0.0;\t\n\tfloat frequency = 1.0;\n\tfloat amplitude = 0.5;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += simplex3d(p * frequency) * amplitude;\n\t\tamplitude *= 0.5;\n\t\tfrequency *= 2.0 + float(i) / 100.0;\n\t}\n\treturn min(f, 1.0);\n}\n\nvec4 mainImage(vec2 fragCoord )\n{\n    //Setup coordinates\n    vec2 uv = 1.0 - fragCoord.xy / uRes.xy;\n    vec2 coord = 1.0 - uv * 2.0;\n    uv.x = 1.0 - abs(1.0 - uv.x * 2.0);\n    vec3 p = vec3(uv, time * speed);\n    \n    //Sample a noise function\n    float blot = fbmB(p * 3.0 + 8.0);\n    float shade = fbmB(p * 2.0 + 16.0);\n    \n    //Threshold\n    blot = (blot + (sqrt(uv.x) - abs(0.5 - uv.y)));\n    blot = smoothstep(0.65, 0.71, blot) * max(1.0 - shade * shadeContrast, 0.0);\n    \n    //Color\n    vec4 fragColor = vec4(mix(paperColor, inkColor, blot), 1.0);\n    fragColor.rgb *= 1.0 - pow(max(length(coord) - 0.5, 0.0), 5.0);\n    return fragColor;\n}\n\nvec3 hash3(in vec3 p) {\n  vec3 q = vec3(dot(p, vec3(127.1, 311.7, 189.2)),\n                dot(p, vec3(269.5, 183.3, 324.7)),\n                dot(p, vec3(419.2, 371.9, 128.5)));\n  return fract(sin(q) * 43758.5453);\n}\n\nfloat noise(in vec3 x, float v) {\n  // adapted from IQ's 2d voronoise:\n  // http://www.iquilezles.org/www/articles/voronoise/voronoise.htm\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n\n  float s = 1.0 + 31.0 * v;\n  float va = 0.0;\n  float wt = 0.0;\n  for (int k=-2; k<=1; k++)\n  for (int j=-2; j<=1; j++)\n  for (int i=-2; i<=1; i++) {\n      vec3 g = vec3(float(i), float(j), float(k));\n      vec3 o = hash3(p + g);\n      vec3 r = g - f + o + 0.5;\n      float d = dot(r, r);\n      float w = pow(1.0 - smoothstep(0.0, 1.414, sqrt(d)), s);\n      va += o.z * w;\n      wt += w;\n    }\n    return va / wt;\n}\n\nfloat fBm(in vec3 p, float v) {\n  float sum = 0.0;\n  float amp = 1.0;\n  for(int i = 0; i < 1; i++) {\n      sum += amp * noise(p, v);\n      amp *= 0.5;\n      p *= 2.0;\n  }\n  return sum;\n}\n\nvoid main() {\n  // vec2 p = gl_FragCoord.xy / uRes.xy - .5;\n\n  vec4 flow = texture2D(flowmap, vUv);\n  // // p += flow.x;\n\n  // vec3 rd = normalize(vec3(p, 1.0));\n  // vec3 pos = vec3(0.0, 0.0, 1.0) * time + rd * 15.0;\n\n  // vec3 col = vec3(0.067,0.173,0.537) * fBm(pos, 1.);\n\n  // // gl_FragColor = vec4(mix(vec3(0.067,0.173,0.537), col, anim), 1.);\n\n    vec2 uv = vUv;\n    vec2 coord = 1.0 - uv * 2.0;\n    uv.x = 1.0 - abs(1.0 - uv.x * 2.0);\n    vec3 p = vec3(uv, time * speed);\n  \n  //Sample a noise function\n  float blot = fbmB(p * 10.0 + 80.0);\n  float shade = fbmB(p * 2.0 + 16.0);\n  \n  //Threshold\n  // blot = (blot + (sqrt(flow.x) - abs(0.5 - flow.y)));\n  // blot = smoothstep(0.65, 0.71, blot) * max(1.0 - shade * shadeContrast, 0.0);\n  \n  //Color\n  vec4 fragColor = flow * blot;\n\n  gl_FragColor = vec4(vec3(fragColor) * vec3(0.0), fragColor.a);\n  gl_FragColor = vec4(vec3(flow) * uTheme, flow.a);\n  // gl_FragColor = flow;\n}\n",vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = vec4(position, 1.0);\n}\n"}),x=t(1472),g=i.MathUtils.damp;var b=t(5893);function y(){return function(n){var e=(0,r.Z)((function(n){return n.theme})),t=(0,c.w)(),o=t.size,l=t.gl.capabilities.isWebGL2,u=(0,a.useMemo)((function(){var t=new i.OrthographicCamera(-1,1,1,-1,0,1),r=l?new i.WebGLMultisampleRenderTarget(512,512):new i.WebGLRenderTarget(512,512);r.texture.generateMipmaps=!1,r.depthBuffer=!1,r.stencilBuffer=!1,r.texture.format=i.RGBFormat,r.samples=4,w.uniforms.uTheme.value="light"===e?new i.Vector3(0,0,0):new i.Vector3(1,1,1),w.uniforms.tFlowMap.value=n.value,w.uniforms.uRes.value=new i.Vector2(o.width,o.height);var a=new i.Scene,u=d(),c=new i.Mesh(u,w);return c.frustumCulled=!1,a.add(c),a.background=new i.Color(2171169),[r,a,t,c]}),[]),f=u[0],s=u[1],m=u[2],p=u[3],b=(0,a.useRef)(0),y=(0,x.useSpring)((function(){return{opacity:0,config:x.config.gentle}})),M=(0,h.Z)(y,2);M[0],M[1].start({opacity:.5,onChange:function(n){var e=n.value;b.current=e.opacity}}),(0,a.useEffect)((function(){return function(){f.dispose(),v(s)}}),[]),(0,a.useEffect)((function(){p.material.uniforms.uTheme.value="light"===e?new i.Vector3(0,0,0):new i.Vector3(1,1,1)}),[e]),(0,c.x)((function(n,e){var t=n.gl;p.material.uniforms.anim.value=g(p.material.uniforms.anim.value,b.current,1.75,e),p.material.uniforms.time.value+=e,t.setRenderTarget(null),t.render(s,m)}),10),(0,a.useEffect)((function(){f.setSize(o.width,o.height),w.uniforms.uRes.value=new i.Vector2(o.width,o.height)}),[f,o])}(p()),null}var M=function(n){var e=n.children,t=(0,r.Z)((function(n){return n.dom}));return(0,b.jsxs)(o.Xz,{mode:"concurrent",style:{position:"fixed",top:"0px",left:"0px",width:"100vw",height:"100vh",overflow:"hidden",pointerEvents:"none"},shadows:!1,gl:{alpha:!0,antialias:!1,stencil:!1,depth:!0},linear:!1,onCreated:function(n){return n.events.connect(t.current)},children:[(0,b.jsx)(y,{}),e]})}}}]);